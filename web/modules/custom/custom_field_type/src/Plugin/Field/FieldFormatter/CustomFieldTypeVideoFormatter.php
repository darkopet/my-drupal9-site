<?php

namespace Drupal\custom_field_type\Plugin\Field\FieldFormatter;

use Drupal\Core\Field\FormatterBase;
use Drupal\Core\Field\FieldItemListInterface;
use Drupal\Core\Form\FormStateInterface;

/**
 * Plugin implementation of the "custom_field_type" formatter.
 *
 * @FieldFormatter(
 *   id = "custom_field_type_video",
 *   module = "custom_field_type",
 *   label = @Translation("Displays Youtube Video"),
 *   field_types = {
 *    "custom_field_type"
 *   }
 * )
 */

// Class name ends with Formatter to show that it is a Field Formatter.
class CustomFieldTypeVideoFormatter extends FormatterBase {

  // Defining DEFAULT SETTINGS for the image.
  /**
   * {@inheritdoc}
   */
  public static function defaultSettings() {
    return array(
      'width' => '600',
      'height' => '450',
    ) + parent::defaultSettings(); // TODO: Change the autogenerated stub
  }

  // Defining the FORM of SETTINGS for the field formatter. It has specific representation on the Manage Display page.
  /**
   * {@inheritdoc}
   */
  public function settingsForm(array $form, FormStateInterface $form_state) {
    $elements['width'] = array(
      '#type' => 'textfield',
      '#title' => t('Youtube video width'),
      '#default_value' => $this->getSetting('width'),
    );
    $elements['height'] = array(
      '#type' => 'textfield',
      '#title' => t('Youtube video height'),
      '#default_value' => $this->getSetting('height'),
    );
    return $elements;
  }

  // viewElements() formatter with its methods and components.
  /**
   * {@inheritdoc}
   */
  public function viewElements(FieldItemListInterface $items, $langcode = NULL) {
    $elements = array();
    // Loading the settings defined through the SETTINGS FORM or CLASS PROPERTIES as fallback.
    $width = $this->getSetting('width');
    $height = $this->getSetting('height');
    // Multiple fields are supported, looping through all the elements of the field.
    foreach ($items as $delta => $item) {
      preg_match("#(?<=v=)[a-zA-Z0-9-]+(?=&)|(?<=v\/)[^&\n]+(?=\?)|(?<=v=)[^&\n]+|(?<=youtu.be/)[^&\n]+#", $item->value, $matches);
      if(!empty($matches)) {
        $elements[$delta] = array(
          // #theme key to specify which template to use to process the field elements.
          // new template created for the formatter custom_field_type_video_formatter
          // template defined in custom_field_type.module
          '#theme' => 'custom_field_type_formatter',
          '#width' => $width,
          '#height' => $height,
          '#video_id' => $matches[0],
        );
      }
    }
    return $elements;
  }

  // Returning what will be shown in the field description on the Manage Display page (SUMMARY of the SETTINGS).
  /**
   * {@inheritdoc}
   */
  public function settingsSummary() {
    $summary = [];
    $settings = $this->getSettings();
    if (!empty($settings['width']) && !empty($settings['height'])) {
      $summary[] = t('Video size: @width x @height',
        ['@width' => $settings['width'], '@height' => $settings['height']]);
    }
    else {
      $summary[] = t('Define video size');
    }
    return $summary;
  }
}
