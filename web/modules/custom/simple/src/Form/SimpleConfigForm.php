<?php

/**
 * @file
 * Contains \Drupal\simple\Form\SimpleConfigForm.
 */

namespace Drupal\simple\Form;

use Drupal\Core\Form\ConfigFormBase;
use Drupal\Core\Form\FormStateInterface;

class SimpleConfigForm extends ConfigFormBase {
  // Getting the id of the form which can be used in a hook_alter method to modify things.
  /**
   * {@inheritdoc}
   */
  public function getFormId()
  {
    // TODO: Implement getFormId() method.
    return 'simple_config_form';
  }

  // Creatomg a form with 2 items: simple text field for an email address and group of checkboxes
  /**
   * {@inheritdoc}
   */
  public function buildForm(array $form, FormStateInterface $form_state) {
    $form = parent::buildForm($form, $form_state); // TODO: Change the autogenerated stub
    $config = $this->config('simple.settings');
    $form['email'] = array(
      '#type' => 'textfield',
      '#title' => $this->t('Email'),
      '#default_value' => $config->get('simple.email'),
      '#required' => TRUE,
    );
    // Loading a list of all node types to create a checkbox for each.
    $node_types = \Drupal\node\Entity\NodeType::loadMultiple();
    $node_types_titles = array();
    foreach ($node_types as $machine_name => $val) {
      $node_types_titles[$machine_name] = $val -> label();
    }
    $form['node_types'] = array(
      '#type' => 'checkboxes',
      '#title' => $this->t('Node Types'),
      '#options' => $node_types_titles,
      '#default_value' => $config->get('simple.node_types'),
    );
    return $form;
  }
  // #default_value is used the config of a previously saved form state.
  // After fields are entered, on page refresh new values will be stored.s

  // Loading up the configuration and saving the values that are found in the form state.
  /**
   * {@inheritdoc}
   */
  public function submitForm(array &$form, FormStateInterface $form_state) {
    $config = $this->config('simple.settings');
    $config->set('simple.email', $form_state->getValue('email'));
    $config->set('simple.node_types', $form_state->getValue('node_types'));
    $config->save();
    return parent::submitForm($form, $form_state); // TODO: Change the autogenerated stub
  }

  /**
   * {@inheritdoc}
   */
  protected function getEditableConfigNames() {
    // TODO: Implement getEditableConfigNames() method.
    return [
      'simple.settings',
    ];
  }
}
